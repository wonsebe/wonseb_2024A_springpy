[0] HTTP 프로토콜 : 이동 문자 전송 규약
    클라이언트                       서버
        ---------request----------->
        <--------response----------->
        *HTTP 기반의 통신은 요청 있을경우에만 응답이 가능하다. 무상태(상태유지 안함)

[1] 웹 소켓 websocket
    1. 정의 : ws 프로토콜을 기반으로 클라이언트와 서버 사이에  *지속적인 양방향* 연결
    2. 지속적인 양방향 연결 (상태유지 함)
        -소캣: 통신의 종착점(엔드포인트 , 통신주고 받을때의 도착 지점)
        -클라이언트 소켓이 서버 소켓으로 부터 연결 요청
    3. 사용처: 실시간통신, 채팅, 알림, 보안 등등
        -클라이언트가 요청이 없어도 응답을 받을 수 있다.
    4. 소켓 통신 구조
        클라이언트소켓                          서버소켓
        1. clientClient()                      1. serverSocket() ip:port
                                               2. bind() 바인딩: 서버소켓 등록
        3. connect()  --------연결요청----------> 4. accept() 클라이언트 요청 수용
        ########################################################################
        * 클라이언트소켓 정보가 서버소켓에 등록되어 서버소켓은 클라이언트소켓에 대해 알고있는 상태 ( 상태유지 )
        5. write() ----------------------------> 6. read()
        통신 보내기                               통신 받기
        ########################################################################
        5. read() ------------------------------> 6. write()
        통신 받기                                  통신 보내기
        ########################################################################
        7 . close() -----------------------------> 8. close() 연결끊기

[2] '서버소켓' 구현
    1. 스프링에서 구현하는 방법
        1. '웹소켓' 라이브러리 디펜더시 추가 :
    2. 서버소켓 핸들러(컨트롤러)
